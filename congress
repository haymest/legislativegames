<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>US Congress Pass a Bill Game</title>
    <style>
        /* CSS for Game Layout and Styling */
        .game-wrapper {
            max-width: 1200px;
            margin: 0 auto;
        }
        .container {
            max-width: 100%;
            margin: 20px auto;
            background: #fff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #004d40;
            text-align: center;
            border-bottom: 2px solid #e0e0e0;
            padding-bottom: 10px;
        }
        #game-board {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
            justify-content: space-between;
        }
        .stage {
            background-color: #e0f2f1;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            width: calc(33% - 20px);
            min-width: 280px;
            transition: background-color 0.3s, transform 0.3s;
        }
        /* Responsive adjustments for smaller screens */
        @media (max-width: 900px) {
            .stage {
                width: calc(50% - 20px);
            }
        }
        @media (max-width: 600px) {
            .stage {
                width: 100%;
            }
        }

        .current-stage {
            background-color: #00bcd4; /* Current stage highlight */
            color: white;
            transform: scale(1.03);
            font-weight: bold;
        }
        .stage h3 {
            margin-top: 0;
            color: #004d40;
            border-bottom: 1px dashed #b2dfdb;
            padding-bottom: 5px;
        }
        .current-stage h3 {
            color: white;
            border-bottom: 1px dashed rgba(255, 255, 255, 0.5);
        }
        #controls, #pre-game-controls {
            background-color: #c8e6c9;
            padding: 20px;
            border-radius: 8px;
            margin-top: 30px;
            text-align: center;
        }
        #pre-game-controls {
            background-color: #b2ebf2; /* Light blue for bonuses/resources */
        }
        #resource-status {
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px dashed #7dd6e2;
        }
        #resource-status p {
            margin: 5px 0;
        }
        .small-text {
            font-size: 0.9em;
            font-style: italic;
            color: #333;
            margin-top: 10px;
        }

        #startButton, .stageRollButton, .lobbyButton, .mediaButton, #victoryNewGameButton {
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            background-color: #4caf50;
            color: white;
            border: none;
            border-radius: 6px;
            transition: background-color 0.3s;
            margin: 5px; 
            display: inline-block;
        }

        .lobbyButton {
            background-color: #ff9800; /* Orange for Lobbying */
        }
        .mediaButton {
            background-color: #e91e63; /* Pink for Media */
        }
        #startButton:hover, .stageRollButton:hover:not([disabled]), #victoryNewGameButton:hover {
            background-color: #388e3c;
        }
        .lobbyButton:hover:not([disabled]) {
            background-color: #f57c00;
        }
        .mediaButton:hover:not([disabled]) {
            background-color: #c2185b;
        }

        /* Style for disabled buttons */
        .stageRollButton[disabled], .lobbyButton[disabled], .mediaButton[disabled] {
            background-color: #aaa;
            cursor: not-allowed;
        }

        /* Ensure only the active button is visible/active */
        .stage:not(.current-stage) .stageRollButton {
            display: none;
        }
        /* Hide the start button after the game begins */
        #startButton.hidden {
            display: none;
        }

        #rollResult {
            font-size: 1.5em; 
            margin: 10px 0;
            font-weight: bold;
            color: #e53935;
        }
        #message {
            font-size: 1.1em;
            color: #004d40;
            margin-top: 10px;
            min-height: 25px;
        }
        #status {
            background-color: #ffcdd2;
        }
        .death-step {
            background-color: #ff6f6f;
            color: white;
        }
    </style>
</head>
<body>

<div class="game-wrapper">
    <div class="container">
        <h1>US Congress: Pass a Bill Game ðŸ‡ºðŸ‡¸</h1>

        <div id="victory-screen" style="display: none; text-align: center; padding: 50px; background-color: #d4edda; border: 3px solid #155724; border-radius: 10px;">
            <h2 style="color: #155724; font-size: 3em;">VICTORY! BILL SIGNED INTO LAW! ðŸŽ‰</h2>
            <p style="font-size: 1.5em; margin-top: 20px;">Against all odds, your bill survived the gauntlet of Gridlock!</p>
            <button id="victoryNewGameButton" style="padding: 10px 30px; font-size: 1.2em; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 20px;">START NEW GAME</button>
        </div>
        <div id="game-content">
            <div id="controls">
                <h2>Game Status</h2>
                <div id="partisanship-display" style="font-size: 1.2em; font-weight: bold; color: #721c24;">Partisanship: Rolling...</div>
                <div id="rollResult"></div>
                <div id="message">Click **START NEW GAME** to begin!</div>
                <div id="status">
                    Current Stage: <span id="current-stage-display">START</span>
                    <br>Game Status: <span id="game-status">Awaiting Start</span>
                    <br><span id="momentum-display">Momentum Bonus: +0</span>
                    <br><span id="attempt-count-display">Attempts Remaining: 5</span>
                </div>
                <button id="startButton">START NEW GAME</button>
            </div>
            
            <div id="pre-game-controls">
                <h2>Strategic Resources</h2>
                <div id="resource-status">
                    <p>Lobbying Power (IG Bonus): <span id="lobbying-uses">3</span> remaining.</p>
                    <p>Media Pressure (+1 to any roll): <span id="media-uses">3</span> remaining.</p>
                    <p>IG Bonus Applied To: <span id="ig-chamber-display">None</span></p>
                    <p class="small-text">(Rolls are 1d10. Difficulty is set by Partisanship at start.)</p>
                </div>
                
                <div id="resource-buttons">
                    <h3>Use Lobbying Power (Choose Chamber)</h3>
                    <button id="useHouseLobby" class="lobbyButton">HOUSE LOBBY (+1)</button>
                    <button id="useSenateLobby" class="lobbyButton">SENATE LOBBY (+1)</button>
                    <h3>Use Media Pressure (+1 to Current Roll)</h3>
                    <button id="useMediaPressure" class="mediaButton" disabled>USE MEDIA PRESSURE (+1)</button>
                </div>
            </div>
            
            <div id="game-board">
                <div class="stage" id="stage-H1">
                    <h3>House 1. Speaker's Referral</h3>
                    <p>Base Success: **Required Roll 8+**</p>
                    <button class="stageRollButton" data-stage-index="0" disabled>Roll Step 1</button>
                </div>
                <div class="stage" id="stage-H2">
                    <h3>House 2. Committee Work/Vote</h3>
                    <p>Base Success: **Required Roll 9+**</p>
                    <button class="stageRollButton" data-stage-index="1" disabled>Roll Step 2</button>
                </div>
                <div class="stage" id="stage-H3">
                    <h3>House 3. Rules Committee</h3>
                    <p>Base Success: **Required Roll 7+**</p>
                    <button class="stageRollButton" data-stage-index="2" disabled>Roll Step 3</button>
                </div>
                <div class="stage" id="stage-H4">
                    <h3>House 4. House Floor Debate/Amendment</h3>
                    <p>Base Success: **Required Roll 8+** | Penalty Roll: 7</p>
                    <button class="stageRollButton" data-stage-index="3" disabled>Roll Step 4</button>
                </div>
                <div class="stage death-step" id="stage-H5">
                    <h3>House 5. Final House Vote</h3>
                    <p>Base Success: **Required Roll 9+** (Major Hurdle)</p>
                    <button class="stageRollButton" data-stage-index="4" disabled>Roll Step 5</button>
                </div>

                <div class="stage" id="stage-S1">
                    <h3>Senate 6. Majority Leader's Referral</h3>
                    <p>Base Success: **Required Roll 8+**</p>
                    <button class="stageRollButton" data-stage-index="5" disabled>Roll Step 6</button>
                </div>
                <div class="stage" id="stage-S2">
                    <h3>Senate 7. Committee Work/Vote</h3>
                    <p>Base Success: **Required Roll 9+**</p>
                    <button class="stageRollButton" data-stage-index="6" disabled>Roll Step 7</button>
                </div>
                <div class="stage" id="stage-S3">
                    <h3>Senate 8. Filibuster Check (Cloture)</h3>
                    <p>Base Success: **Required Roll 10** (Ultimate Hurdle)</p>
                    <button class="stageRollButton" data-stage-index="7" disabled>Roll Step 8</button>
                </div>
                <div class="stage" id="stage-S4">
                    <h3>Senate 9. Senate Floor Debate/Amendment</h3>
                    <p>Base Success: **Required Roll 8+** | Penalty Roll: 7</p>
                    <button class="stageRollButton" data-stage-index="8" disabled>Roll Step 9</button>
                </div>
                <div class="stage death-step" id="stage-S5">
                    <h3>Senate 10. Final Senate Vote</h3>
                    <p>Base Success: **Required Roll 9+** (Major Hurdle)</p>
                    <button class="stageRollButton" data-stage-index="9" disabled>Roll Step 10</button>
                </div>
                
                <div class="stage" id="stage-F1">
                    <h3>Final 11. Conference Committee</h3>
                    <p>Base Success: **Required Roll 7+**</p>
                    <button class="stageRollButton" data-stage-index="10" disabled>Roll Step 11</button>
                </div>
                <div class="stage death-step" id="stage-F2">
                    <h3>Final 12. Final Congressional Vote</h3>
                    <p>Base Success: **Required Roll 9+**</p>
                    <button class="stageRollButton" data-stage-index="11" disabled>Roll Step 12</button>
                </div>
                <div class="stage death-step" id="stage-F3">
                    <h3>Final 13. Presidential Action</h3>
                    <p>Base Success: **Required Roll 8+**</p>
                    <button class="stageRollButton" data-stage-index="12" disabled>Roll Step 13</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// JavaScript for US Congress Game (HIGH ROLL WINS, 1D10 PARTISANSHIP)
const MAX_ATTEMPTS = 5; // Max 5 total attempts (initial + 4 restarts)
const DICE_SIDES = 10; // All rolls are 1d10

// Global game state variables
let currentStageIndex = -1;
let lastFailedStageIndex = -1; 
let gameActive = false;
let lobbyUses = 3; 
let mediaUses = 3;
let houseLobbyBonus = 0;
let senateLobbyBonus = 0;
let mediaBonus = 0;
let momentumBonus = 0;
let attemptCount = 0;
let partisanshipModifier = 0; 
let partisanshipName = ''; 

// Global DOM references (Will be assigned in initGame)
let startButton, victoryNewGameButton, useHouseLobbyButton, useSenateLobbyButton, useMediaPressureButton;
let gameContent, victoryScreen, rollResultDisplay, messageDisplay, currentStageDisplay, gameStatusDisplay;
let allStageButtons;
let momentumDisplay, attemptCountDisplay, partisanshipDisplay;
const resourcesDisplay = {};

const stages = [
    // HOUSE STAGES (0-4)
    { id: 'stage-H1', name: 'House 1. Speaker\'s Referral', requiredRoll: 8, penaltyRolls: [1, 2, 3, 4, 5], delayRolls: [6, 7], chamber: 'H' }, 
    { id: 'stage-H2', name: 'House 2. Committee Work/Vote', requiredRoll: 9, penaltyRolls: [1, 2, 3, 4, 5, 6, 7, 8], chamber: 'H' }, 
    { id: 'stage-H3', name: 'House 3. Rules Committee', requiredRoll: 7, penaltyRolls: [1, 2, 3, 4, 5, 6], chamber: 'H' }, 
    { id: 'stage-H4', name: 'House 4. House Floor Debate/Amendment', requiredRoll: 8, penaltyRolls: [7], chamber: 'H' }, 
    { id: 'stage-H5', name: 'House 5. Final House Vote', requiredRoll: 9, penaltyRolls: [1, 2, 3, 4, 5, 6, 7, 8], chamber: 'H' }, 
    
    // SENATE STAGES (5-9)
    { id: 'stage-S1', name: 'Senate 6. Majority Leader\'s Referral', requiredRoll: 8, penaltyRolls: [1, 2, 3, 4, 5], delayRolls: [6, 7], chamber: 'S' }, 
    { id: 'stage-S2', name: 'Senate 7. Committee Work/Vote', requiredRoll: 9, penaltyRolls: [1, 2, 3, 4, 5, 6, 7, 8], chamber: 'S' }, 
    { id: 'stage-S3', name: 'Senate 8. Filibuster Check (Cloture)', requiredRoll: 10, penaltyRolls: [1, 2, 3, 4, 5, 6, 7, 8, 9], chamber: 'S' }, 
    { id: 'stage-S4', name: 'Senate 9. Senate Floor Debate/Amendment', requiredRoll: 8, penaltyRolls: [7], chamber: 'S' }, 
    { id: 'stage-S5', name: 'Senate 10. Final Senate Vote', requiredRoll: 9, penaltyRolls: [1, 2, 3, 4, 5, 6, 7, 8], chamber: 'S' }, 
    
    // FINAL STEPS (10-12)
    { id: 'stage-F1', name: 'Final 11. Conference Committee', requiredRoll: 7, penaltyRolls: [1, 2, 3, 4, 5, 6], chamber: 'F' },
    { id: 'stage-F2', name: 'Final 12. Final Congressional Vote', requiredRoll: 9, penaltyRolls: [1, 2, 3, 4, 5, 6, 7, 8], chamber: 'F' },
    { id: 'stage-F3', name: 'Final 13. Presidential Action', requiredRoll: 8, penaltyRolls: [1, 2, 3, 4, 5, 6, 7], chamber: 'F' }
];

const PARTISANSHIP_MAP = [
    { range: [1, 3], modifier: -1, name: "Low Partisanship (EASY)" },
    { range: [4, 7], modifier: 0, name: "Moderate Partisanship (NORMAL)" },
    { range: [8, 10], modifier: 1, name: "High Partisanship (GRIDLOCK)" }
];

function rollDice() {
    return Math.floor(Math.random() * DICE_SIDES) + 1;
}

function rollPartisanship() {
    const pRoll = rollDice();
    const result = PARTISANSHIP_MAP.find(p => pRoll >= p.range[0] && pRoll <= p.range[1]);
    
    partisanshipModifier = result.modifier;
    partisanshipName = result.name;
    partisanshipDisplay.textContent = `Partisanship: ${partisanshipName} (Modifier: ${partisanshipModifier >= 0 ? '+' : ''}${partisanshipModifier})`;
    messageDisplay.textContent = `Partisanship rolled a ${pRoll}. Difficulty set for the session!`;
}

function updateResourceUI() {
    // Lobbying status display text setup
    const houseLobbyStatus = houseLobbyBonus > 0 ? '+1 Active' : 'None';
    const senateLobbyStatus = senateLobbyBonus > 0 ? '+1 Active' : 'None';
    resourcesDisplay.igChamber.textContent = `House: ${houseLobbyStatus} | Senate: ${senateLobbyStatus}`;

    resourcesDisplay.lobbyUses.textContent = lobbyUses;
    resourcesDisplay.mediaUses.textContent = mediaUses;
    momentumDisplay.textContent = `Momentum Bonus: +${momentumBonus}`;
    attemptCountDisplay.textContent = `Attempts Remaining: ${MAX_ATTEMPTS - attemptCount}`;

    useMediaPressureButton.disabled = mediaUses === 0;

    const lobbyDisabled = lobbyUses === 0 || (houseLobbyBonus > 0 && senateLobbyBonus > 0);
    useHouseLobbyButton.disabled = lobbyUses === 0 || houseLobbyBonus > 0;
    useSenateLobbyButton.disabled = lobbyUses === 0 || senateLobbyBonus > 0;
}

function handleMediaUse() {
    if (mediaUses > 0 && mediaBonus === 0 && gameActive) {
        mediaUses--;
        mediaBonus = 1;
        messageDisplay.textContent = `Media Pressure used! +1 applied to the NEXT roll only.`;
        updateResourceUI();
    }
}

function advanceStage() {
    if (currentStageIndex >= 0) {
        document.getElementById(stages[currentStageIndex].id).classList.remove('current-stage');
    }
    
    currentStageIndex++;

    if (currentStageIndex < stages.length) {
        const nextStage = stages[currentStageIndex];
        document.getElementById(nextStage.id).classList.add('current-stage');
        currentStageDisplay.textContent = nextStage.name;
        updateActiveStageButton();
        updateResourceUI();
    } else {
        gameOver(true); // Win
    }
}

function goToStage(index) {
    if (currentStageIndex >= 0) {
        document.getElementById(stages[currentStageIndex].id).classList.remove('current-stage');
    }
    currentStageIndex = index;

    if (currentStageIndex < stages.length) {
        const targetStage = stages[currentStageIndex];
        document.getElementById(targetStage.id).classList.add('current-stage');
        currentStageDisplay.textContent = targetStage.name;
        updateActiveStageButton();
        updateResourceUI();
    } else {
        gameOver(true);
    }
}

function fullGameReset() {
    // Reset all game state variables
    momentumBonus = 0;
    lastFailedStageIndex = -1;
    lobbyUses = 3;
    mediaUses = 3;
    houseLobbyBonus = 0; 
    senateLobbyBonus = 0;
    mediaBonus = 0;
    igChamber = '';
    attemptCount = 0;
    partisanshipModifier = 0;
    partisanshipName = '';
    
    // Reset UI elements
    partisanshipDisplay.textContent = 'Rolling...';
    
    currentStageIndex = 0; 
    
    // Hide end screen, show game content
    if (document.getElementById('victory-screen')) {
         document.getElementById('victory-screen').style.display = 'none';
    }
    gameContent.style.display = 'block';

    setupNewGame(false);
}

function setupNewGame(isRestart = false) {
    gameActive = true;
    
    startButton.classList.add('hidden'); 
    document.querySelectorAll('.stage').forEach(el => el.classList.remove('current-stage'));
    gameStatusDisplay.textContent = 'In Progress';

    // --- State Logic ---
    if (isRestart) {
        momentumBonus = 1;
        lastFailedStageIndex = -1; 
        messageDisplay.textContent = `RESTARTING at ${stages[currentStageIndex].name} with +1 Momentum!`;
    } else {
        // New session begins: Roll for Partisanship
        rollPartisanship();
        momentumBonus = 0;
        lastFailedStageIndex = -1;
        currentStageIndex = 0; 
        attemptCount = 0; 
        messageDisplay.textContent = `Partisanship set. Begin the session!`;
    }
    
    updateResourceUI();
    goToStage(currentStageIndex);
}

function handleRestart() {
    if (lastFailedStageIndex !== -1) {
        if (attemptCount >= MAX_ATTEMPTS) {
            alert(`Campaign Failed! The bill died after ${MAX_ATTEMPTS} attempts due to sustained ${partisanshipName.toLowerCase()}.`);
            fullGameReset();
            return;
        }

        currentStageIndex = lastFailedStageIndex;
        attemptCount++; 
        setupNewGame(true);
    }
}

function gameOver(win) {
    gameActive = false;
    Array.from(allStageButtons).forEach(btn => btn.disabled = true);
    
    startButton.classList.remove('hidden');
    gameContent.style.display = 'none'; 

    if (win) {
        victoryScreen.style.display = 'block';
    } else {
        // Failure: Offer RE-ATTEMPT
        lastFailedStageIndex = currentStageIndex;
        gameStatusDisplay.textContent = 'Bill is Dead. ðŸ’€';
        const failedStage = stages[currentStageIndex];
        messageDisplay.textContent = `The bill failed at ${failedStage.name}. Click RE-ATTEMPT (Attempts remaining: ${MAX_ATTEMPTS - attemptCount - 1}).`;
        
        startButton.textContent = 'RE-ATTEMPT';
        gameContent.style.display = 'block'; 
    }
    mediaBonus = 0; 
    updateResourceUI();
}

function handleStageRoll(event) {
    const targetIndex = parseInt(event.target.dataset.stageIndex);
    
    if (targetIndex !== currentStageIndex || !gameActive) return;

    const currentStage = stages[currentStageIndex]; 
    let roll = rollDice(); // 1d10 roll
    
    let totalBonus = momentumBonus + mediaBonus; 
    let lobbyChamberBonus = 0;

    // Determine Lobby Bonus based on current chamber
    if (currentStage.chamber === 'H') {
        lobbyChamberBonus = houseLobbyBonus;
    } else if (currentStage.chamber === 'S') {
        lobbyChamberBonus = senateLobbyBonus;
    }
    
    totalBonus += lobbyChamberBonus; // Add the chamber's lobbying bonus

    let modifiedRoll = roll + totalBonus;
    
    // Apply partisanship modifier to the required threshold
    const requiredThreshold = currentStage.requiredRoll + partisanshipModifier;
    
    rollResultDisplay.textContent = `Roll: ${modifiedRoll} (Base: ${roll}, Bonus: +${totalBonus}, Required: ${requiredThreshold}+)`;

    if (mediaBonus > 0) {
        mediaBonus = 0;
        updateResourceUI();
    }

    // --- Pass Logic (High Roll Wins) ---
    const passed = modifiedRoll >= requiredThreshold;
    
    if (passed) {
         messageDisplay.textContent = `SUCCESS! Rolled ${modifiedRoll}/${DICE_SIDES + totalBonus}. Advancing to ${currentStage.name} next...`;
         momentumBonus = 0; 
         updateResourceUI();
         advanceStage();
         return;
    }
    
    // --- Penalty/Delay/Fail Logic (If NOT passed) ---
    
    // Delay Condition (Check if the modified roll is equal to the specific delay/procedural number)
    if (currentStage.delayRolls && currentStage.delayRolls.includes(modifiedRoll)) {
        messageDisplay.textContent = `DELAY! Rolled a ${modifiedRoll}. Procedural setback. Roll again.`;
        return; 
    }

    // Penalty Condition (Check if the modified roll is equal to the specific penalty number)
    // NOTE: This logic now uses the MODIFIED roll for the penalty condition for simplicity,
    // reflecting that the penalty occurs *after* modifiers are applied.
    if (currentStage.penaltyRolls && currentStage.penaltyRolls.includes(modifiedRoll)) {
        // Penalty logic for H4/S4 Floor Debate
        if (currentStage.id === 'stage-H4' || currentStage.id === 'stage-S4') {
             
             // Check and clear the specific chamber's lobbying bonus
             if (currentStage.chamber === 'H' && houseLobbyBonus > 0) {
                houseLobbyBonus = 0;
                messageDisplay.textContent = `COMPLICATION! Poison pill amendment passed, House Lobby Power LOST! Advancing...`;
            } else if (currentStage.chamber === 'S' && senateLobbyBonus > 0) {
                 senateLobbyBonus = 0;
                messageDisplay.textContent = `COMPLICATION! Poison pill amendment passed, Senate Lobby Power LOST! Advancing...`;
            } else {
                 messageDisplay.textContent = `COMPLICATION! Amendment passed. Advancing...`;
            }
            momentumBonus = 0;
            updateResourceUI();
            advanceStage();
            return;
        }
        
        // General Failure (Rolls that are far below the target)
        gameOver(false);
        return;
    }
    
    // --- Final Fail Condition (If none of the above passed) ---
    gameOver(false); 
}

// --- Unified Start Button Handler ---
function handleStartButtonClick() {
    if (startButton.textContent === 'RE-ATTEMPT') {
        handleRestart(); 
    } else {
        fullGameReset(); 
    }
}

// --- INITIALIZATION FUNCTION ---
function initializeGame() {
    // 1. Assign all DOM references
    startButton = document.getElementById('startButton');
    victoryNewGameButton = document.getElementById('victoryNewGameButton');
    useHouseLobbyButton = document.getElementById('useHouseLobby');
    useSenateLobbyButton = document.getElementById('useSenateLobby');
    useMediaPressureButton = document.getElementById('useMediaPressure');

    gameContent = document.getElementById('game-content');
    victoryScreen = document.getElementById('victory-screen');

    rollResultDisplay = document.getElementById('rollResult');
    messageDisplay = document.getElementById('message');
    currentStageDisplay = document.getElementById('current-stage-display');
    gameStatusDisplay = document.getElementById('game-status');
    allStageButtons = document.getElementsByClassName('stageRollButton');
    momentumDisplay = document.getElementById('momentum-display');
    attemptCountDisplay = document.getElementById('attempt-count-display');
    partisanshipDisplay = document.getElementById('partisanship-display'); 

    resourcesDisplay.lobbyUses = document.getElementById('lobbying-uses');
    resourcesDisplay.mediaUses = document.getElementById('media-uses');
    resourcesDisplay.igChamber = document.getElementById('ig-chamber-display');
    
    // 2. Attach listeners
    startButton.addEventListener('click', handleStartButtonClick); 
    victoryNewGameButton.addEventListener('click', fullGameReset);
    
    // Attach the simplified lobbying handlers
    useHouseLobbyButton.addEventListener('click', () => handleLobbyUse('H'));
    useSenateLobbyButton.addEventListener('click', () => handleLobbyUse('S'));
    
    useMediaPressureButton.addEventListener('click', handleMediaUse);
    
    Array.from(allStageButtons).forEach(button => {
        button.addEventListener('click', handleStageRoll);
    });

    // 3. Initial UI setup (Ready to click Start)
    updateResourceUI();
    currentStageDisplay.textContent = 'H1 (Introduction)';
    gameStatusDisplay.textContent = 'Awaiting Start';
    startButton.classList.remove('hidden');
    gameContent.style.display = 'block';
}

// Execute initialization when the page is fully loaded
document.addEventListener('DOMContentLoaded', initializeGame);

// Fallback execution for CodePen 
if (document.readyState === 'complete') {
     initializeGame();
}
